"""
正则表达式（regular expression）： 使用正确的规则组成的式子， 简写成 regex 或 re

正则表达式是一门独立的语言。跟具体的编程语言无关，但是因为正则使用太广泛了， 所以主流的编程语言都
集成了正则表达式的功能。 比如python中就有re正则模块处理正则表达式。

学习正则表达式就是学习： 一些符号规则

字符
    x 字符 x
    \\ 反斜线字符
    \t 制表符 ('\u0009')
    \n 新行（换行）符 ('\u000A')
    \r 回车符 ('\u000D')

字符类
    [abc] a、b 或 c（简单类）
    [^abc] 任何字符，除了 a、b 或 c（否定）
    [a-zA-Z] a 到 z 或 A 到 Z，两头的字母包括在内（范围）


预定义字符类
    . 任何字符（与行结束符不匹配）
    \d 数字：[0-9]
    \s 空白字符：[ \t\n\x0B\f\r]
    \w 单词字符：[a-zA-Z_0-9]

边界匹配器
    ^ 行的开头
    $ 行的结尾
    \b 单词边界

Greedy 数量词
    X? X，一次或一次也没有
    X* X，零次或多次
    X+ X，一次或多次
    X{n} X，恰好 n 次
    X{n,} X，至少 n 次
    X{n,m} X，至少 n 次，但是不超过 m 次

Reluctant 数量词
    X?? X，一次或一次也没有
    X*? X，零次或多次
    X+? X，一次或多次
    X{n}? X，恰好 n 次
    X{n,}? X，至少 n 次
    X{n,m}? X，至少 n 次，但是不超过 m 次

Logical 运算符
    XY X 后跟 Y
    X|Y X 或 Y
    (X) X，作为捕获组

Back 引用
    \n 任何匹配的 nth 捕获组

特殊构造（非捕获）
    (?:X) X，作为非捕获组


正则表达式优缺点：
   优点： 简化字符串相关操作  （匹配，查找，替换，分割）
   缺点：可读性差


https://tool.oschina.net/regex/

"""

import re

"""
校验QQ号码：
 1. 必须是数字
 2，长度5-13位
 3. 0不能开头
"""
qq = "2343469"
# match(regex, str):
# regex = "^[1-9][0-9]{4,12}$"
regex = "^[1-9]\\d{4,12}$"
# match(): 从字符串的开始只要有内容满足正则要求，就会返回True
# match(): 返回None, 表示没有匹配到
m = re.match(regex, qq)
if m:
    print("匹配成功")
else:
    print("匹配失败")